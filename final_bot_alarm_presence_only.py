import logging
import time
import os

chrome_options = Options()
chrome_options.add_argument("--headless")
chrome_options.add_argument("--no-sandbox")
chrome_options.add_argument("--disable-dev-shm-usage")
chrome_options.add_argument("--window-size=1920,1080")
chrome_options.add_argument('user-agent=Mozilla/5.0 ...')

driver = webdriver.Chrome(options=chrome_options)


BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")

STATION_FROM_CODE = '2200300'
STATION_TO_CODE = '2218300'
DEPARTURE_DATE = '2025-06-29'

SEARCH_INTERVAL_SECONDS = 120
ALARM_INTERVAL_SECONDS = 5

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def send_telegram_message(message):
    import requests
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    payload = {'chat_id': CHAT_ID, 'text': message, 'parse_mode': 'Markdown'}
    try:
        requests.post(url, json=payload, timeout=10).raise_for_status()
        logging.info("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤ Telegram.")
    except requests.exceptions.RequestException as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram: {e}")

def does_train_exist():
    search_url = f"https://booking.uz.gov.ua/search-trips/{STATION_FROM_CODE}/{STATION_TO_CODE}/list?startDate={DEPARTURE_DATE}"
    
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--window-size=1920,1080")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument('user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36')


    if not os.path.exists(chrome_binary_path):
        logging.error(f"–ù–ï –ó–ù–ê–ô–î–ï–ù–û –ë–†–ê–£–ó–ï–†! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —à–ª—è—Ö: {chrome_binary_path}")
        return False
    

    
    driver = None
    try:
        service = ChromeService(executable_path=driver_path)
        driver = webdriver.Chrome(options=chrome_options)
        driver.get(search_url)
        WebDriverWait(driver, 15).until(
            EC.presence_of_element_located((By.CLASS_NAME, "TripUnit"))
        )
        logging.info("–ó–ù–ê–ô–î–ï–ù–û –ö–ê–†–¢–ö–£ –ü–û–¢–Ø–ì–ê!")
        return True

    except TimeoutException:
        logging.info("–ü–æ—Ç—è–≥–∏ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return False
    except Exception as e:
        logging.error(f"–°—Ç–∞–ª–∞—Å—è –Ω–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        return False
    finally:
        if driver:
            driver.quit()

if __name__ == "__main__":
    if not BOT_TOKEN or not CHAT_ID:
        logging.error("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –≤–∞—à—ñ BOT_TOKEN —Ç–∞ CHAT_ID —è–∫ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è.")
    else:
        logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –≤ —Ä–µ–∂–∏–º—ñ '—Å–∏–≥–Ω–∞–ª—ñ–∑–∞—Ü—ñ—ó'.")
        send_telegram_message(
            f"‚úÖ **–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π!**\n\n"
            f"–ü–æ—á–∏–Ω–∞—é –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ø–æ—Ç—è–≥—ñ–≤ –∑–∞ –º–∞—Ä—à—Ä—É—Ç–æ–º **–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∏–π ‚Üí –õ–∞–∑–µ—â–∏–Ω–∞** –Ω–∞ **{DEPARTURE_DATE}**.\n\n"
            f"–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—ñ 150 —Å–µ–∫—É–Ω–¥. –£ —Ä–∞–∑—ñ –∑–Ω–∞—Ö—ñ–¥–∫–∏ - –ø–µ—Ä–µ—Ö—ñ–¥ –≤ —Ä–µ–∂–∏–º '—Å–∏–≥–Ω–∞–ª—ñ–∑–∞—Ü—ñ—ó'."
        )
        try:
            while True:
                if does_train_exist():
                    logging.info("–ü–û–¢–Ø–ì –ó–ù–ê–ô–î–ï–ù–û! –ü–µ—Ä–µ—Ö–æ–¥–∂—É –≤ —Ä–µ–∂–∏–º —Ñ–ª—É–¥—É –∫–æ–∂–Ω—ñ 5 —Å–µ–∫—É–Ω–¥.")
                    alarm_message = (
                        f"üö® **–£–í–ê–ì–ê! –Ñ –ü–û–¢–Ø–ì!** üö®\n\n"
                        f"–ó'—è–≤–∏–≤—Å—è –ø–æ—Ç—è–≥ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç—ñ **–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∏–π ‚Üí –õ–∞–∑–µ—â–∏–Ω–∞** –Ω–∞ **{DEPARTURE_DATE}**.\n\n"
                        f"**–¢–ï–†–ú–Ü–ù–û–í–û –ü–ï–†–ï–í–Ü–†–Ø–ô–¢–ï –°–ê–ô–¢!**"
                    )
                    while True:
                        send_telegram_message(alarm_message)
                        time.sleep(ALARM_INTERVAL_SECONDS)
                else:
                    logging.info(f"–ü–æ—Ç—è–≥—ñ–≤ –Ω–µ–º–∞—î. –ù–∞—Å—Ç—É–ø–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–µ—Ä–µ–∑ {SEARCH_INTERVAL_SECONDS / 60:.0f} —Ö–≤–∏–ª–∏–Ω.")
                    time.sleep(SEARCH_INTERVAL_SECONDS)
        except KeyboardInterrupt:
            logging.info("–†–æ–±–æ—Ç—É —Å–∫—Ä–∏–ø—Ç–∞ –∑—É–ø–∏–Ω–µ–Ω–æ –≤—Ä—É—á–Ω—É.")
